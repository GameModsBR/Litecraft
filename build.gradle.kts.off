import org.gradle.kotlin.dsl.accessors.runtime.addDependencyTo

plugins {
    kotlin("jvm") version "1.3.72"
    idea
}

group = "br.com.gamemods"
version = "0.1.0-SNAPSHOT"

repositories {
    jcenter()
}

val groups = mutableMapOf<String, MutableList<BasicSourceSetData>>()

val coreApi = createSourceSet("api", "core")
val worldApi = createSourceSet("api", "world")
val schedulerApi = createSourceSet("api", "scheduler")
val pluginApi = createSourceSet("api", "plugin")

dependencies {
    coreApi.compile(kotlin("stdlib-jdk8"))
}

groups["api"]?.asSequence()?.filter { it != pluginApi }?.forEach(pluginApi::dependsOn)

addToServer(pluginApi)

sourceSets {
    main {
        java { setSrcDirs(emptyList<String>()) }
        resources { setSrcDirs(listOf("src/server/main/resources")) }
    }
    test {
        java { setSrcDirs(listOf("src/server/test/java")) }
        resources { setSrcDirs(listOf("src/server/test/resources")) }
    }
}

kotlin {
    sourceSets {
        main { kotlin.setSrcDirs(listOf("src/server/main/kotlin")) }
        test { kotlin.setSrcDirs(listOf("src/server/main/kotlin")) }
    }
}

tasks {
    compileKotlin {
        kotlinOptions.jvmTarget = "13"
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "13"
    }
    withType<JavaCompile>().configureEach {
        options.javaModuleVersion.set(provider { project.version as String })
    }
}

fun createSourceSet(group: String, name: String): BasicSourceSetData {
    val gradleName = name + group.capitalize()
    sourceSets {
        val base = create(gradleName) {
            java.setSrcDirs(emptyList<String>())
            resources.setSrcDirs(listOf("src/$group/$name/main/resources"))
        }
        create(gradleName+"Test") {
            java.setSrcDirs(listOf("src/$group/$name/test/java"))
            resources.setSrcDirs(listOf("src/$group/$name/test/resources"))
            compileClasspath += base.compileClasspath
            runtimeClasspath += base.runtimeClasspath
        }
    }

    kotlin {
        sourceSets {
            getByName(gradleName) {
                kotlin.setSrcDirs(listOf("src/$group/$name/main/kotlin"))
            }
            getByName(gradleName+"Test") {
                kotlin.setSrcDirs(listOf("src/$group/$name/test/kotlin"))
            }
        }
    }
    
    return BasicSourceSetData(
        sourceSets.named(gradleName),
        sourceSets.named(gradleName+"Test"),
        configurations.named(gradleName+"Compile"),
        configurations.named(gradleName+"Runtime"),
        configurations.named(gradleName+"TestCompile"),
        configurations.named(gradleName+"TestRuntime")
    ).also {
        configurations {
            it.testCompile.extendsFrom(it.compile)
            it.testRuntime.extendsFrom(it.runtime)
        }

        idea {
            module {
                val src = it.test.java.srcDirs + kotlin.sourceSets.getByName(gradleName+"Test").kotlin.srcDirs
                val resources = it.test.resources.srcDirs
                
                sourceDirs = (sourceDirs - src).toMutableSet()
                resourceDirs = (resourceDirs - resources).toMutableSet()
                
                testSourceDirs = (testSourceDirs + src).toMutableSet()
                testResourceDirs = (testResourceDirs - resources).toMutableSet()
            }
        }
        
        if (gradleName != "coreApi") {
            it.dependsOn(coreApi)
        }
        
        groups.getOrPut(group, ::mutableListOf) += it
    }
}

fun addToServer(custom: BasicSourceSetData) {
    sourceSets {
        main {
            compileClasspath += custom.main.compileClasspath
            runtimeClasspath += custom.main.runtimeClasspath
        }
    }
}

data class BasicSourceSetData(
    val mainProvider: NamedDomainObjectProvider<SourceSet>,
    val testProvider: NamedDomainObjectProvider<SourceSet>,
    val compileProvider: NamedDomainObjectProvider<Configuration>,
    val runtimeProvider: NamedDomainObjectProvider<Configuration>,
    val testCompileProvider: NamedDomainObjectProvider<Configuration>,
    val testRuntimeProvider: NamedDomainObjectProvider<Configuration>
) {
    val main by mainProvider
    val test by testProvider
    val compile by compileProvider
    val runtime by runtimeProvider
    val testCompile by testCompileProvider
    val testRuntime by testRuntimeProvider
    
    fun dependsOn(other: BasicSourceSetData): BasicSourceSetData {
        mainProvider.configure {
            compileClasspath += other.main.compileClasspath
            runtimeClasspath += other.main.runtimeClasspath
        }
        return this
    }
}

plugins.withType<JavaPlugin>().configureEach {
    configure<JavaPluginExtension> {
        modularity.inferModulePath.set(true)
    }
}
